AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  scrumblr-app

  Sample SAM Template for scrumblr-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 600
    Environment:
      Variables:
        TABLE_NAME: Board
        TABLE_WEBSOCKET: WSConnection

Resources:
  ScrumblrApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      BinaryMediaTypes: ['*/*']

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: scrumblr-api/
      Handler: lambda.handler
      Runtime: nodejs12.x
      # VpcConfig:
      #   SubnetIds:
      #     - !Ref LambdaSubnet
      #   SecurityGroupIds:
      #     - !Ref LambdaSecurityGroup
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ScrumblrApi
            Path: '/{proxy+}'
            Method: ANY

      Policies:
        # Give DynamoDB Full Access to your Lambda Function
        - AmazonDynamoDBFullAccess

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: scrumblrWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  DefaultLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: scrumblr-api/
      Handler: default.handler
      Timeout: 30
      Runtime: nodejs12.x
      Policies:
        - AWSLambda_FullAccess
        - CloudWatchLogsFullAccess
        - AmazonAPIGatewayInvokeFullAccess
        - AmazonAPIGatewayAdministrator
  ConfigDefaultLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
      - DefaultLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DefaultLambdaFunction
      Principal: apigateway.amazonaws.com

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectIntegration
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectHandlerFunction.Arn}/invocations
  WebSocketConnectHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: scrumblr-api/
      Handler: onconnect.handler
      Timeout: 30
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref WebsocketConnectionTable
      Policies:
        - AWSLambda_FullAccess
        - CloudWatchLogsFullAccess
        - AmazonAPIGatewayInvokeFullAccess
        - AmazonAPIGatewayAdministrator
        - AmazonDynamoDBFullAccess
  WebsocketConnectLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
      - WebSocketConnectHandlerFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketConnectHandlerFunction
      Principal: apigateway.amazonaws.com
  WebSocketDisconnectHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: scrumblr-api/
      Handler: ondisconnect.handler
      Timeout: 30
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref WebsocketConnectionTable
      Policies:
        - AWSLambda_FullAccess
        - CloudWatchLogsFullAccess
        - AmazonAPIGatewayInvokeFullAccess
        - AmazonAPIGatewayAdministrator
        - AmazonDynamoDBFullAccess
  WebsocketDisconnectLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
      - WebSocketDisconnectHandlerFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketDisconnectHandlerFunction
      Principal: apigateway.amazonaws.com
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectIntegration
  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectHandlerFunction.Arn}/invocations

  # VPC:
  #   Type: AWS::EC2::VPC
  #   Properties:
  #     CidrBlock: 10.0.0.0/16

  # InternetGateway:
  #   Type: AWS::EC2::InternetGateway

  # VPCGatewayAttachment:
  #   Type: AWS::EC2::VPCGatewayAttachment
  #   Properties:
  #     InternetGatewayId: !Ref InternetGateway
  #     VpcId: !Ref VPC

  # PublicSubnet:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: 10.0.1.0/28
  #     AvailabilityZone: !Select
  #       - 0
  #       - !GetAZs
  #         Ref: AWS::Region

  # LambdaSubnet:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: 10.0.128.0/20
  #     AvailabilityZone: !Select
  #       - 1
  #       - !GetAZs
  #         Ref: AWS::Region

  # NatGatewayEIP:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc

  # NatGateway:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     SubnetId: !Ref PublicSubnet
  #     AllocationId: !GetAtt NatGatewayEIP.AllocationId

  # PublicRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref VPC

  # PublicRTAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     SubnetId: !Ref PublicSubnet

  # LambdaRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref VPC

  # LambdaRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref LambdaRouteTable
  #     SubnetId: !Ref LambdaSubnet

  # InternetRoute:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId: !Ref InternetGateway

  # NatGatewayRoute:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref LambdaRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NatGateway

  # LambdaSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Open Lambda ports
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - CidrIp: 0.0.0.0/0
  #         FromPort: 80
  #         ToPort: 80
  #         IpProtocol: tcp
  #       - CidrIp: 0.0.0.0/0
  #         FromPort: 443
  #         ToPort: 443
  #         IpProtocol: tcp

  ScrumblrTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Board
      AttributeDefinitions:
        - AttributeName: BoardId
          AttributeType: S
        - AttributeName: BoardName
          AttributeType: S
      KeySchema:
        - AttributeName: BoardId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: BoardNameGSI
          KeySchema:
            - AttributeName: BoardName
              KeyType: HASH
          Projection:
            NonKeyAttributes:
              - board_notes
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
  WebsocketConnectionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WSConnection
      AttributeDefinitions:
        - AttributeName: ConnectionId
          AttributeType: S
        - AttributeName: Status
          AttributeType: B
      KeySchema:
        - AttributeName: ConnectionId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: StatusGSI
          KeySchema:
            - AttributeName: Status
              KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref WebSocketApi

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: prod
      DeploymentId: !Ref Deployment

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: 'API Gateway endpoint URL for Prod stage for Hello World function'
    Value: !Sub 'https://${ScrumblrApi}.execute-api.${AWS::Region}.amazonaws.com/prod/'
  HelloWorldFunction:
    Description: 'Hello World Lambda Function ARN'
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: 'Implicit IAM Role created for Hello World function'
    Value: !GetAtt HelloWorldFunctionRole.Arn
